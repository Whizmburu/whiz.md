# commands/text_fonts/fancy_command.py
import asyncio

# Unicode character mappings for various fancy styles
# Source: Mostly from online unicode text converters
# This is not exhaustive and can be expanded.

FANCY_STYLES = {
    "bold": {
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        "fancy": "ùóÆùóØùó∞ùó±ùó≤ùó≥ùó¥ùóµùó∂ùó∑ùó∏ùóπùó∫ùóªùóºùóΩùóæùóøùòÄùòÅùòÇùòÉùòÑùòÖùòÜùòáùóîùóïùóñùóóùóòùóôùóöùóõùóúùóùùóûùóüùó†ùó°ùó¢ùó£ùó§ùó•ùó¶ùóßùó®ùó©ùó™ùó´ùó¨ùó≠ùü¨ùü≠ùüÆùüØùü∞ùü±ùü≤ùü≥ùü¥ùüµ"
    },
    "italic": {
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùò¢ùò£ùò§ùò•ùò¶ùòßùò®ùò©ùò™ùò´ùò¨ùò≠ùòÆùòØùò∞ùò±ùò≤ùò≥ùò¥ùòµùò∂ùò∑ùò∏ùòπùò∫ùòªùòàùòâùòäùòãùòåùòçùòéùòèùòêùòëùòíùòìùòîùòïùòñùòóùòòùòôùòöùòõùòúùòùùòûùòüùò†ùò°"
        # Italic numbers are not commonly available as single unicode chars easily, often mixed with normal numbers
    },
    "bold_italic": {
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùôñùôóùôòùôôùôöùôõùôúùôùùôûùôüùô†ùô°ùô¢ùô£ùô§ùô•ùô¶ùôßùô®ùô©ùô™ùô´ùô¨ùô≠ùôÆùôØùòºùòΩùòæùòøùôÄùôÅùôÇùôÉùôÑùôÖùôÜùôáùôàùôâùôäùôãùôåùôçùôéùôèùôêùôëùôíùôìùôîùôï"
    },
    "script": { # Mathematical Script
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùí∂ùí∑ùí∏ùíπùëíùíªùëîùíΩùíæùíøùìÄùìÅùìÇùìÉùëúùìÖùìÜùìáùìàùìâùìäùìãùìåùìçùìéùìèùíú‚Ñ¨ùíûùíü‚Ñ∞‚Ñ±ùí¢‚Ñã‚Ñêùí•ùí¶‚Ñí‚Ñ≥ùí©ùí™ùí´ùí¨‚ÑõùíÆùíØùí∞ùí±ùí≤ùí≥ùí¥ùíµ"
    },
    "script_bold": { # Mathematical Bold Script
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∏ùìπùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©"
    },
    "fraktur": { # Mathematical Fraktur
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®"
    },
    "fraktur_bold": { # Mathematical Bold Fraktur
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "ùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñüùï¨ùï≠ùïÆùïØùï∞ùï±ùï≤ùï≥ùï¥ùïµùï∂ùï∑ùï∏ùïπùï∫ùïªùïºùïΩùïæùïøùñÄùñÅùñÇùñÉùñÑùñÖ"
    },
    "monospace": {
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        "fancy": "ùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂ùô∑ùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâùü∂ùü∑ùü∏ùüπùü∫ùüªùüºùüΩùüæùüø"
    },
    "doublestruck": { # Double-Struck (often for sets in math, e.g. ‚Ñù for real numbers)
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", # Some letters don't have standard double-struck lowercase
        "fancy": "ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåïç¢ùïéùïèùïê‚Ñ§ùüòùüôùüöùüõùüúùüùùüûùüüùü†ùü°" # Note: \U0001D55D is ùïù, etc. ùïç is \U0001D54D, ùïé is \U0001D54E
    },
    "smallcaps": {
        # True small caps are limited in Unicode. These are the Unicode Small Capital letters.
        # Lowercase letters are converted to these if a direct mapping exists, otherwise to their uppercase equivalent.
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "fancy": "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢ABCDEFGHIJKLMNOPQRSTUVWXYZ" # Using full-size caps for missing small caps lowercase. x and q are tricky.
        # A better map would convert 'a' to '·¥Ä', 'B' to 'B' (as small cap B is same as cap B visually in many fonts if not scaled)
        # For a true "tiny text" effect, one might just use smaller font size if platform supports,
        # or use a mix of actual small cap characters and regular lowercase for those not available.
        # This version primarily provides the Unicode SMALL CAPITAL letters for input 'a-z' and 'A-Z'.
        # For a more common "small caps" effect where 'a' -> 'A' (small version), 'b' -> 'B' (small version) etc.
        # This is typically a font rendering feature, not a direct Unicode char swap for all letters.
        # The provided 'fancy' string here uses available Unicode small capital letters.
        # Let's refine: map lowercase to available small caps, and uppercase to standard uppercase (as they'd be the 'large' caps).
        # Or, more simply, map all input a-z and A-Z to the available small caps (A-Z like).
        # "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢" are for a-z. What about A-Z input?
        # For "tiny text", it's usually about making all letters look like smaller capitals.
        # So, a->·¥Ä, b-> ô, ..., z->·¥¢, A->·¥Ä, B-> ô, ..., Z->·¥¢.
        # Small caps for q, x are often missing. Using phonetic extensions or regular letters for those.
        # q -> q (regular), x -> x (regular) or similar looking small caps if available.
        # Using standard uppercase for letters without direct small_cap unicode.
        # True small caps: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
        # Unicode:        ·¥Ä  ô ·¥Ñ ·¥Ö ·¥á “ì …¢  ú …™ ·¥ä ·¥ã  ü ·¥ç …¥ ·¥è P Q R s ·¥õ ·¥ú V w x Y Z (P,Q,R,S,T,U,V,W,X,Y,Z are not true small caps but phonetic symbols or regular caps)
        # For a simpler "tiny text" (superscript like, but not always):
        # Let's provide a common "smallcaps" based on available Unicode block:
        # U+1D2C - U+1D6A has some.
        # For simplicity, I'll use a common mapping found online for "small caps generator"
        # This often means converting all letters to their uppercase versions first, then mapping.
        # Or mapping lowercase to available small caps, and uppercase to... also small caps.
        # Standard approach for "tiny text" generators:
        # a -> ·¥Ä, b ->  ô, c -> ·¥Ñ, ..., A -> ·¥Ä, B ->  ô ...
        # Using a good mapping:
        "normal": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        "fancy":  "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢0123456789"
        # Note: some characters like 'q' and 'x' might not have perfect small cap Unicode equivalents
        # and may appear as regular lowercase or slightly different symbols.
        # The above fancy string maps both lower and upper to the same set of small cap looking chars.
    }
    # Add more styles as needed: e.g., circled, squared, parenthesized
}

def convert_text_to_fancy(text, style_name):
    if style_name not in FANCY_STYLES:
        return f"Style '{style_name}' not found. Available styles: {', '.join(FANCY_STYLES.keys())}"

    style = FANCY_STYLES[style_name]
    translation_table = str.maketrans(style["normal"], style["fancy"])
    return text.translate(translation_table)

async def handle_fancy(message, args, client, bot_instance):
    """
    Handles the /fancy command.
    Converts text to a specified fancy Unicode style.
    Usage: /fancy <style_name> <text_to_convert>
           /fancy list (to see available styles)
    """
    command_name = "fancy"
    print(f"Executing /{command_name} with args: {args} for message: {message.sender if hasattr(message, 'sender') else 'Unknown'}")

    if not args:
        if hasattr(message, 'reply'): await message.reply(f"Usage: /{command_name} <style> <text> OR /{command_name} list")
        return

    style_arg = args[0].lower()

    if style_arg == "list":
        available_styles = ", ".join(FANCY_STYLES.keys())
        if hasattr(message, 'reply'): await message.reply(f"Available fancy styles: {available_styles}")
        return

    if len(args) < 2:
        if hasattr(message, 'reply'): await message.reply(f"Please provide text to convert. Usage: /{command_name} {style_arg} <text>")
        return

    text_to_convert = " ".join(args[1:])
    converted_text = convert_text_to_fancy(text_to_convert, style_arg)

    if hasattr(message, 'reply'):
        await message.reply(converted_text)
    else:
        print(f"Original: {text_to_convert}\n{style_arg}: {converted_text}")


if __name__ == '__main__':
    class MockMessage:
        def __init__(self, text, sender):
            self.text = text
            self.sender = sender
        async def reply(self, text_content):
            print(f"BOT REPLIED TO {self.sender}: {text_content}")

    class MockClient: pass
    class MockBotInstance: pass

    async def main_test():
        mock_bot = MockBotInstance()
        mock_client = MockClient()

        print("\n--- Fancy Text Test Cases ---")

        test_text = "Hello World 123"

        print("\nTest 1: List styles")
        msg_list = MockMessage("/fancy list", "TestUserFancy_List")
        await handle_fancy(msg_list, ["list"], mock_client, mock_bot)

        print("\nTest 2: Specific style (bold)")
        msg_bold = MockMessage(f"/fancy bold {test_text}", "TestUserFancy_Bold")
        await handle_fancy(msg_bold, ["bold", test_text], mock_client, mock_bot)

        print("\nTest 3: Specific style (script)")
        msg_script = MockMessage(f"/fancy script {test_text}", "TestUserFancy_Script")
        await handle_fancy(msg_script, ["script", test_text], mock_client, mock_bot)

        print("\nTest 4: Specific style (monospace)")
        msg_mono = MockMessage(f"/fancy monospace {test_text}", "TestUserFancy_Monospace")
        await handle_fancy(msg_mono, ["monospace", test_text], mock_client, mock_bot)

        print("\nTest 5: Invalid style")
        msg_invalid = MockMessage(f"/fancy non_existent_style {test_text}", "TestUserFancy_Invalid")
        await handle_fancy(msg_invalid, ["non_existent_style", test_text], mock_client, mock_bot)

        print("\nTest 6: No text provided")
        msg_no_text = MockMessage("/fancy bold", "TestUserFancy_NoText")
        await handle_fancy(msg_no_text, ["bold"], mock_client, mock_bot)

        print("\nTest 7: No args provided")
        msg_no_args = MockMessage("/fancy", "TestUserFancy_NoArgs")
        await handle_fancy(msg_no_args, [], mock_client, mock_bot)

    asyncio.run(main_test())
